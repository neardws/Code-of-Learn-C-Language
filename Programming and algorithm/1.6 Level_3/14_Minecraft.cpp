// 7216:Minecraft
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// Minecraft是一个几乎无所不能的沙盒游戏，
// 玩家可以利用游戏内的各种资源进行创造，搭建自己的世界。

// 在Minecraft中，基本的建筑元素是边长为1个单位的立方体，
// Tony想用N个这种小立方体搭建一个长方体，
// 并用他珍藏已久的贴纸对其进行装饰。
// 如果一张贴纸可以贴满小立方体的一个面。
// 那么，他需要用掉多少张贴纸呢？

// 输入
// 一个整数N，表示小明所拥有的小立方体的个数。N不会超过1000。
// 输出
// 一个整数，即小明最少用掉的贴纸有多少张。
// 样例输入
// 9
// 样例输出
// 30
// http://noi.openjudge.cn/ch0201/7216/

// 思路：体积固定，枚举长、宽、高算最小表面积即可，长、宽、高按升序排列，
// 可去掉一些无谓的遍历。

// 鉴于n值太小，本题完全可以用枚举法操作。

// 本题要在不同种方块摆法中挑选出使用贴纸最少的一种，
// 由于需要摆一个三维的物品，那么变量就会用到i,j,h，
// 类似于解三元不定方程，将所有的情况列举出来再判断即可。

// 为了避免重复枚举，我们可以使用“由小枚举到大的策略”，
// 即每次枚举都使i<=j<=h，那么i,j<=n/3; 

// 限制枚举的范围，可以提高百分之六十的效率。

// 那么代码便信手拈来了，两重循环，计算所需贴纸数量，
// 判断是否为最少的方案，存储，输出答案。

#include<bits/stdc++.h>
using namespace std;
int main(){
    int n, min=999999, now;  //min为最小贴纸数，now为当前贴纸数
    cin>>n;
    for(int i=1;i<=n/3;i++){
        for(int j=i;j<=n/3;j++){
            if(n%(i*j) == 0){
                int h = n / (i * j);
                now = i*j*2 + i*h*2 + j*h*2;  
                if(now < min){
                    min=now;
                }
            }
        }
    }
    cout<<min<<endl;
    return 0;
}