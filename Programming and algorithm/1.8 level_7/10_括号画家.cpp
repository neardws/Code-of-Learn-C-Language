// 括号画家
// 括号画家
// Candela是一名漫画家，她有一个奇特的爱好，就是在纸上画括号。这一天，刚刚起床的Candela画了一排括号序列，
// 其中包含小括号()、中括号[]和大括号{}，总长度为N。这排随意绘制的括号序列显得杂乱无章，
// 于是Candela定义了什么样的括号序列是美观的：
// (1) 空的括号序列是美观的；
// (2) 若括号序列A是美观的，则括号序列(A)、[A]、{A}也是美观的；
// (3) 若括号序列A、B都是美观的，则括号序列AB也是美观的；
// 例如 [(){}]() 是美观的括号序列，而 )({)[}]( 则不是。
// 现在Candela想知道她画出的括号序列是不是美观的。你能帮帮她吗？
// 时间限制：1000
// 内存限制：262144
// 输入
// 一个括号序列，长度不超过10000。
// 输出
// 如果它是美观的，输出Yes，否则输出No。
// 样例输入
// {}[(){}]()
// 样例输出
// Yes

// 解题思路：本题是一道典型的括号匹配问题，使用栈可以解决。从左到右遍历字符串，如果遇到左括号，就将其入栈；
// 如果遇到右括号，就弹出栈顶元素，如果栈顶元素与右括号不匹配，或者遍历完整个字符串后栈非空，就说明括号不匹配，输出 No，
// 否则输出 Yes。

#include <bits/stdc++.h>
using namespace std;

int main() {
    string s;
    stack<char> T; // 定义一个栈 T
    cin >> s;
    bool flag = true;
    int len = s.length();
    for (int i = 0; i < len; ++i) {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') { // 遇到左括号，入栈
            T.push(s[i]);
        } else if (s[i] == ')' || s[i] == '}' || s[i] == ']') { // 遇到右括号，弹出栈顶元素
            if (T.empty()) { // 如果栈为空，说明右括号没有匹配的左括号
                flag = false;
                break;
            }
            char tmp = T.top(); T.pop();
            if ((s[i] == ')' && tmp != '(') || (s[i] == ']' && tmp != '[') || (s[i] == '}' && tmp != '{')) { // 栈顶元素与右括号不匹配
                flag = false;
                break;
            }
        }
    }
    if (flag) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }
    return 0;
}
